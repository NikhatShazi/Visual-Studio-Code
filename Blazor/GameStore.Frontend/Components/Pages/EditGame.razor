@page "/editgame"
@page "/editgame/{Id:int}"
@using System.Diagnostics.Eventing.Reader

@inject NavigationManager NavigationManager
@inject GamesClients GamesClient
@inject GenresClient GenresClient

<PageTitle>@title</PageTitle>

<h3>@title</h3>

@if(genres is null || game is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@game" FormName="editGame" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" @bind-value="game.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=> game.Name" />
                </div>

                <div class="mb-3">
                    <label for="genre" class="form-label">Genre</label>
                    <InputSelect id="genre" @bind-value="game.GenreId" class="form-select">
                        <option value="">Select Genre</option>
                        @if (genres != null)
                        {
                            foreach (var genre in genres)
                            {
                                <option value="@genre.Id">@genre.Name</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="()=> game.GenreId" />

                </div>

                <div class="mb-3">
                    <label for="price" class="form-label">Price</label>
                    <InputNumber id="price" @bind-value="game.Price" class="form-control"></InputNumber>
                    <ValidationMessage For="()=> game.Price" />
                </div>

                <div class="mb-3">
                    <label for="releaseDate" class="form-label">Release Date</label>
                    <InputDate id="releaseDate" @bind-value="game.ReleaseDate" class="form-control"></InputDate>
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
                <a role="button" class="btn btn-secondary" href="/">Cancel</a>

            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
     public int? Id { get; set; } // Parameter to hold the game ID if editing an existing game.
    [SupplyParameterFromForm]
    private GameDetails? game { get; set; } 

    //Instantiate the GenresClient to fetch genres.
    //private GenresClient genresClient = new(); // Create a new instance of GenresClient.
    //private GamesClients gamesClient = new();

    // Array to hold the fetched list of genres in dropdown.
    private Genre[]? genres;

    private string title = string.Empty;
    
    protected override void OnParametersSet()
    {
        if(game is not null) 
        {
            return; // Prevent re-initialization if game is already set.
        }
        if(Id is not null)
        {
            game = GamesClient.GetGameById(Id.Value);
            title = $"Edit {game?.Name}";
        }
        else
        {
            game = new()
            {
                Name = string.Empty,
                ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow)
            };
            title = "New Game";
        }
    }
    
    // OnInitialized method to fetch genres when the component initializes.
    protected override void OnInitialized()
    {
        genres = GenresClient.GetGenres(); //Populate the genres array.
    }

    private void HandleSubmit() //This method will be called in EditForm tag on form submission.
    {
        ArgumentNullException.ThrowIfNull(game);
        if (Id is null)
        {
            GamesClient.AddGame(game); // Add new game if Id is null.
        }
        else
        {
            game.Id = Id.Value; // Ensure the game ID is set for updating.
            GamesClient.UpdateGame(game); // Update existing game if Id is provided.
        }
        NavigationManager.NavigateTo("/"); // Redirect to home page after submission.
    }
}