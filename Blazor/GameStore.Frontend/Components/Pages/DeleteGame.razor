@inject GamesClients Client
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<!-- Modal -->
<div class="modal fade" id="@GetModalId(Game)" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">@title</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the game?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="@Confirm">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    // Game to be deleted. Used at modal Id.
    public GameSummary? Game { get; set; }
    private string title = string.Empty;
    // Update title when parameters are set.
    protected override void OnParametersSet()
    {
            title = $"Delete {Game?.Name}?";
    } 

    // Get the modal Id based on the game Id. //Called at Modal Id.
    public static string GetModalId(GameSummary? game)
    {
        ArgumentNullException.ThrowIfNull(game);
        return $"deleteModal-{game.Id}";
    }
    // Called at the Delete button of the modal. 
    private void Confirm() 
    {
        Client.DeleteGame(Game!.Id);
        NavigationManager.Refresh();
    }
}